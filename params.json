{
  "name": "Rubytutorial",
  "tagline": "",
  "body": "\r\n# RubyTutorial\r\n\r\nWe are using Jupyter Notebooks to make this tutorial.\r\nFor those who don't know about Jupyter Notebooks, go [here](https://jupyter.org/). \r\nBelow is a sample, about how notebooks work.\r\n\r\n![alt text](https://raw.githubusercontent.com/CodingNinjasCodes/RubyTutorial/master/notebook_demo.gif \"Without Smooth Scroll\")\r\n\r\n## Basics\r\n\r\n### Data Types\r\n\r\n\r\n```ruby\r\nmy_num = 15\r\nmy_string = \"Tushar\"\r\nmy_bool = true\r\n\r\nputs my_num, my_string, my_bool\r\n```\r\n\r\n    15\r\n    Tushar\r\n    true\r\n\r\n\r\nRuby is a dynamically typed Language, as we see in the above code, we assigned a number, a string value and a boolean to three different variables\r\n\r\n'puts' is a function that takes a list of arguements and prints to console on a new line, You may use print statement as well, the only difference is, it prints in continuation. \r\n\r\n\r\n```ruby\r\nprint my_num, my_string, my_bool \r\n```\r\n\r\n    15Tushartrue\r\n\r\nmy_num, my_string and my_bool are variables which are holding different objects. For naming variables in ruby we use snakecase as a convention. \r\n\r\nEverything is a an Object in Ruby,\r\n\r\nEverything!\r\n\r\nTo find out class of a ruby object we can call a 'class' method on any object.\r\n\r\n\r\n```ruby\r\nputs my_num.class() , my_string.class() , my_bool.class()\r\n```\r\n\r\n    Fixnum\r\n    String\r\n    TrueClass\r\n\r\n\r\n## Arithmetic\r\n\r\n\r\nBasic Arithmetic operators are '+','-','*','/' and '%'.\r\n\r\n\r\n```ruby\r\nfive = 5\r\ntwo = 2\r\nseven = 5 + 2\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    7\r\n\r\n\r\n\r\n\r\n```ruby\r\nten = five * two\r\n```\r\n\r\n\r\n\r\n\r\n    10\r\n\r\n\r\n\r\n\r\n```ruby\r\none = five % two\r\n```\r\n\r\n\r\n\r\n\r\n    1\r\n\r\n\r\n\r\n\r\n```ruby\r\ntwo = five / two\r\n```\r\n\r\n\r\n\r\n\r\n    2\r\n\r\n\r\n\r\n\r\n```ruby\r\nthree = five - two\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    3\r\n\r\n\r\n\r\n## Strings\r\n\r\n\r\n```ruby\r\nmy_string = \"Programming in Ruby Is Fun.\"\r\n```\r\n\r\n\r\n\r\n\r\n    \"Programming in Ruby Is Fun.\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_string.length()\r\n```\r\n\r\n\r\n\r\n\r\n    27\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_string.reverse()\r\n```\r\n\r\n\r\n\r\n\r\n    \".nuF sI ybuR ni gnimmargorP\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nputs my_string\r\n```\r\n\r\n    Programming in Ruby Is Fun.\r\n\r\n\r\n\r\n```ruby\r\nmy_string.reverse!()\r\n```\r\n\r\n\r\n\r\n\r\n    \".nuF sI ybuR ni gnimmargorP\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nputs my_string\r\n```\r\n\r\n    .nuF sI ybuR ni gnimmargorP\r\n\r\n\r\n\r\n```ruby\r\nmy_string = \"Programming in Ruby Is Fun.\"\r\nmy_string.split(\" \")\r\n```\r\n\r\n\r\n\r\n\r\n    [\"Programming\", \"in\", \"Ruby\", \"Is\", \"Fun.\"]\r\n\r\n\r\n\r\n\r\n```ruby\r\nwords = my_string.split(\" \")\r\nputs words #Gives an array, we'll come to it\r\n```\r\n\r\n    [\"Programming\", \"in\", \"Ruby\", \"Is\", \"Fun.\"]\r\n\r\n\r\n\r\n```ruby\r\nword = \"Programming\"\r\n```\r\n\r\n\r\n\r\n\r\n    \"Programming\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nword.downcase() #Get a word with lower case letters\r\n```\r\n\r\n\r\n\r\n\r\n    \"programming\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nword.upcase() # get a word with upper case letters\r\n```\r\n\r\n\r\n\r\n\r\n    \"PROGRAMMING\"\r\n\r\n\r\n\r\n\r\n```ruby\r\n#This is a single line comment\r\nputs \"comment\" #this can come at the end of any expression\r\n=begin\r\nThis is a multiline comment.\r\n=begin should start at the first character of the line to be it a comment, other wise it wont work\r\n\r\n=end\r\n```\r\n\r\n    comment\r\n\r\n\r\n## Naming Conventions\r\n\r\nFor methods and variables we follow snake case like example_variable, example_function.\r\nFor Classes we follow upper case letters, MyOwnClass.\r\nFor functions which are risky to use, like reverse!, we add exclamation mark at the end.\r\n\r\n## Function Chaining\r\n\r\n\r\n\r\n```ruby\r\nmy_string = \"tushar tuteja\"\r\n```\r\n\r\n\r\n\r\n\r\n    \"tushar tuteja\"\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_string.reverse().upcase() # You can chain function calls one after the other\r\n```\r\n\r\n\r\n\r\n\r\n    \"AJETUT RAHSUT\"\r\n\r\n\r\n\r\n## String Formatter\r\n\r\n\r\n```ruby\r\nmy_name = \"Tushar Tuteja\"\r\nmy_city = \"Delhi\"\r\nputs \"Hi, I am #{my_name}, I belong to #{my_city}.\" #way to format complex strings.\r\n```\r\n\r\n    Hi, I am Tushar Tuteja, I belong to Delhi\r\n\r\n\r\n## Control Flow\r\n\r\n\r\n```ruby\r\nif true\r\n  puts \"true\"\r\nelse\r\n  puts \"false\"\r\nend\r\n\r\n```\r\n\r\n    true\r\n\r\n\r\n\r\n```ruby\r\nfalse == \"false\" # this is false\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n\r\n```ruby\r\nfalse == nil # this is false\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_object = nil\r\n```\r\n\r\n\r\n```ruby\r\nmy_object == nil\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_object.nil? # this is the way to check nil\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\nRuby has infinite true expressions, only two false expressions, one is false and the other is nil. So 0 would evaluate to true, this is different form C and C++ language.\r\n\r\n\r\n```ruby\r\nif my_object\r\n  puts \"true\"\r\nelse\r\n  puts \"nil or false\"\r\nend\r\n\r\n```\r\n\r\n    nil or false\r\n\r\n\r\n\r\n```ruby\r\nmy_object = 0\r\nif my_object\r\n  puts \"this evaluate to true\"\r\nelse\r\n  puts \"should have been false if we were coding in C.\"\r\nend\r\n\r\n```\r\n\r\n    this evaluate to true\r\n\r\n\r\n\r\n```ruby\r\nfirst_condition = false\r\nsecond_condition = true\r\n\r\nif first_condition\r\n  puts \"first condition is true\"\r\nelsif second_condition\r\n  puts \"second condition is true\"\r\nelsif 0 > 3\r\n  puts \"won't happend\"\r\nend\r\n\r\n```\r\n\r\n    second condition is true\r\n\r\n\r\n\r\n```ruby\r\nhungry = true\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\nif not hungry \r\n  puts \"keep working\"\r\nelse\r\n  puts \"eat\"\r\nend\r\n```\r\n\r\n    eat\r\n\r\n\r\nRuby gives us more than if else, it gives us unless else, which is more verbose than if not. Example\r\n\r\n\r\n```ruby\r\nunless hungry\r\n  puts \"keep working\"\r\nelse\r\n  puts \"Eat\"\r\nend\r\n\r\n```\r\n\r\n    Eat\r\n\r\n\r\n### Conditional Operators : == , >= ,<= ,!=, !\r\n\r\n\r\n\r\n```ruby\r\n5 == '5'\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n\r\n```ruby\r\n5*4 == 4*5\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\n4 < 7\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\n8 > 9\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n\r\n```ruby\r\n\"tushar\" > \"tuteja\"\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n\r\n```ruby\r\n5 >= 5\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\n4 != 5\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\n!true\r\n```\r\n\r\n\r\n\r\n\r\n    false\r\n\r\n\r\n\r\n### Composite Conditional Statements\r\n\r\n\r\n```ruby\r\nwork_done = true\r\nif work_done || hungry\r\n  puts \"eat\"\r\nelse\r\n  puts \"work\"\r\nend\r\n```\r\n\r\n    eat\r\n\r\n\r\n\r\n```ruby\r\nputs false || true\r\nputs true || false\r\nputs true && true\r\nputs true && false\r\nputs false || false\r\n```\r\n\r\n    true\r\n    true\r\n    true\r\n    false\r\n    false\r\n\r\n\r\n\r\n```ruby\r\nif not false\r\n  puts \"it is true\"\r\nelse\r\n  puts \"it is false\"\r\nend\r\n\r\n```\r\n\r\n    it is true\r\n\r\n\r\n## Loops\r\n\r\n\r\n```ruby\r\ni = 0 \r\nwhile i < 5 \r\n  puts \"ruby is fun\"\r\n  i = i + 1\r\nend\r\n\r\n```\r\n\r\n    ruby is fun\r\n    ruby is fun\r\n    ruby is fun\r\n    ruby is fun\r\n    ruby is fun\r\n\r\n\r\n\r\n```ruby\r\ni = 5\r\nwhile  i != 0\r\n  puts \"ruby is more verbose\"\r\n  i = i - 1\r\nend\r\n```\r\n\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n\r\n\r\n\r\n```ruby\r\ni = 5\r\nuntil i == 0\r\n  puts \"ruby is more verbose\"\r\n  i = i - 1\r\nend\r\n\r\n```\r\n\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n    ruby is more verbose\r\n\r\n\r\n\r\n```ruby\r\nfor i in 1..5\r\n  puts \"ruby has many ways to do the same thing.\"\r\nend\r\n```\r\n\r\n    ruby has many ways to do the same thing.\r\n    ruby has many ways to do the same thing.\r\n    ruby has many ways to do the same thing.\r\n    ruby has many ways to do the same thing.\r\n    ruby has many ways to do the same thing.\r\n\r\n\r\n\r\n\r\n\r\n    1..5\r\n\r\n\r\n\r\n\r\n```ruby\r\nfor i in 1...5\r\n  puts \"..(two dots) inclues 1 and 5 both, where as ...(three dots) doesn't include 5\"\r\nend\r\n```\r\n\r\n    ..(two dots) inclues 1 and 5 both, where as ...(three dots) doesn't include 5\r\n    ..(two dots) inclues 1 and 5 both, where as ...(three dots) doesn't include 5\r\n    ..(two dots) inclues 1 and 5 both, where as ...(three dots) doesn't include 5\r\n    ..(two dots) inclues 1 and 5 both, where as ...(three dots) doesn't include 5\r\n\r\n\r\n\r\n\r\n\r\n    1...5\r\n\r\n\r\n\r\n\r\n```ruby\r\n5.times do \r\n  puts \"this needs to be done 5 times\"\r\nend\r\n```\r\n\r\n    this needs to be done 5 times\r\n    this needs to be done 5 times\r\n    this needs to be done 5 times\r\n    this needs to be done 5 times\r\n    this needs to be done 5 times\r\n\r\n\r\n\r\n\r\n\r\n    5\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_string = \"Ruby is made for productivity.\"\r\nwords = my_string.split(\" \")\r\nwords.each do |word| #would discuss more of this in arrays and hashes\r\n  puts word.capitalize # This would capitalize every word\r\nend\r\n```\r\n\r\n    Ruby\r\n    Is\r\n    Made\r\n    For\r\n    Productivity.\r\n\r\n\r\n\r\n\r\n\r\n    [\"Ruby\", \"is\", \"made\", \"for\", \"productivity.\"]\r\n\r\n\r\n\r\n## Arrays\r\n\r\n\r\n```ruby\r\na = [] # this creates an empty array\r\n```\r\n\r\n\r\n\r\n\r\n    []\r\n\r\n\r\n\r\nArrays are lists in ruby, means they doesn't need to be homegenous.\r\n\r\n\r\n```ruby\r\na = [\"tushar\", 5, [4,5,6]]\r\n```\r\n\r\n\r\n\r\n\r\n    [\"tushar\", 5, [4, 5, 6]]\r\n\r\n\r\n\r\nArrays are continous data structures\r\n\r\n\r\n\r\n```ruby\r\na = []\r\na[45] = 5\r\nputs a\r\n```\r\n\r\n    [nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, 5]\r\n\r\n\r\na[45] = 0, created 45 empty spaces and then added 5 at 45th index. Indexing starts from zero.\r\n\r\n\r\n```ruby\r\nputs a[45]\r\n```\r\n\r\n    5\r\n\r\n\r\n\r\n```ruby\r\nputs a[0]\r\n```\r\n\r\n    \r\n\r\n\r\n\r\n```ruby\r\nputs a.length\r\n```\r\n\r\n    46\r\n\r\n\r\n## Hashes\r\n\r\nHashes are smilar to javascript dictionaries, the only difference is that they are ordered. \r\n\r\n\r\n```ruby\r\nmy_hash = {} # creates a new Hash\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    {}\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_hash = Hash.new # creates a new Hash\r\n```\r\n\r\n\r\n\r\n\r\n    {}\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_hash = {:name => \"Tushar\", :city => \"Delhi\"} # Creates a hash \r\n```\r\n\r\n\r\n\r\n\r\n    {:name=>\"Tushar\", :city=>\"Delhi\"}\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_hash[:name] # to access :name from my_hash\r\n```\r\n\r\n\r\n\r\n\r\n    \"Tushar\"\r\n\r\n\r\n\r\n:name and :city are actually symbols. they are used for faster accessing, we may use strings as well.\r\n\r\n\r\n\r\n```ruby\r\nmy_hash = {\"name\" => \"tushar\"}\r\n```\r\n\r\n\r\n\r\n\r\n    {\"name\"=>\"tushar\"}\r\n\r\n\r\n\r\n\r\n```ruby\r\nputs my_hash[\"name\"]\r\nputs my_hash[:name] # This won't work, you need to remember that strings and symbols are different\r\n```\r\n\r\n    tushar\r\n    \r\n\r\n\r\n\r\n```ruby\r\nmy_hash = {:name => \"Tushar\", :city => \"Delhi\", :age => 25}\r\n```\r\n\r\n\r\n\r\n\r\n    {:name=>\"Tushar\", :city=>\"Delhi\", :age=>25}\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_hash.each do |key| # iterating over the keys\r\n  puts key\r\nend\r\n\r\n```\r\n\r\n    [:name, \"Tushar\"]\r\n    [:city, \"Delhi\"]\r\n    [:age, 25]\r\n\r\n\r\n\r\n\r\n\r\n    {:name=>\"Tushar\", :city=>\"Delhi\", :age=>25}\r\n\r\n\r\n\r\nIf you look at the above code, the keys are ordered.\r\n\r\n\r\n```ruby\r\nmy_hash.each do |key,value|\r\n  puts \"#{key} : #{value}\"\r\nend\r\n```\r\n\r\n    name : Tushar\r\n    city : Delhi\r\n    age : 25\r\n\r\n\r\n\r\n\r\n\r\n    {:name=>\"Tushar\", :city=>\"Delhi\", :age=>25}\r\n\r\n\r\n\r\n## Methods\r\n\r\n\r\n\r\n```ruby\r\ndef my_method\r\n  puts \"hello method\"\r\nend\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    :my_method\r\n\r\n\r\n\r\n\r\n```ruby\r\nmy_method()\r\n```\r\n\r\n    hello method\r\n\r\n\r\n\r\n```ruby\r\nmy_method # parenthesis are optional in ruby, it makes the code more verbose \r\n```\r\n\r\n    hello method\r\n\r\n\r\n\r\n```ruby\r\ndef is_odd number # parenthesis are optional\r\n  return number % 2 == 1\r\nend\r\n\r\nis_odd 1 # parenthesis are optional\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\ndef is_even number\r\n  number % 2 == 0 #last expression in every function is a return statement by default.\r\nend\r\n\r\n```\r\n\r\n\r\n\r\n\r\n    :is_even\r\n\r\n\r\n\r\n\r\n```ruby\r\nis_even 2\r\n```\r\n\r\n\r\n\r\n\r\n    true\r\n\r\n\r\n\r\n\r\n```ruby\r\ndef join_words words_array\r\n  result = \"\"\r\n  words_array.each do |word|\r\n    result = result + word + \" \" # String concatenation\r\n  end\r\n  result\r\nend\r\n\r\nputs join_words [\"Ruby\",\"is\",\"flexible\"]\r\n```\r\n\r\n    Ruby is flexible \r\n\r\n\r\nWhat is you want to pass a variable number of arguments and you don't want to pass an array.\r\n\r\nVoila, we have *args arguement.\r\n\r\n\r\n```ruby\r\ndef join_words *args\r\n  result = \"\"\r\n  args.each do |word|\r\n    result = result + word + \" \" # String concatenation\r\n  end\r\n  result\r\nend\r\n\r\nputs join_words \"Ruby\",\"is\",\"flexible\" # This code is more verbose\r\nputs join_words \"Ruby\",\"is\",\"flexible\",\",\", \"This\", \"code\" ,\"is\" ,\"more\" ,\"verbose\"\r\n\r\n```\r\n\r\n    Ruby is flexible \r\n    Ruby is flexible , This code is more verbose \r\n\r\n\r\n\r\n```ruby\r\n\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}